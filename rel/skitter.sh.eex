#!/bin/bash

# Copyright 2018 - 2020, Mathijs Saey, Vrije Universiteit Brussel

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Script to start skitter runtimes or systems.
set -e

# ------------- #
# Documentation #
# ------------- #

local_desc="Use skitter locally"
deploy_desc="Deploy a Skitter system over a set of nodes"
worker_desc="Manage a Skitter worker"
master_desc="Manage a Skitter master"

function global_usage() {
  printf '%s\n' "Skitter invocation script"
  printf '\t%s\n' "This script is used to manage the various Skitter applications."
  printf '\t%s\n' "It can be used to start, stop or otherwise manage the applications,"
  printf '\t%s\n' "or it can deploy a set of Skitter applications over a cluster."

  printf '%s\n'   "Usage:"
  printf '\t%s\t%s\n'     "skitter MODE COMMAND [COMMAND OPTIONS]" "Manage skitter MODE"
  printf '\t%s\t\t%s\n'   "skitter [-v | --version]"               "Print version and exit"
  printf '\t%s\t\t\t%s\n' "skitter help [MODE]"                    "Print information for MODE"

  printf '%s\n'       "Modes:"
  printf '\t%s\t%s\n' "d, deploy" "$deploy_desc"
  printf '\t%s\t%s\n' "l, local"  "$local_desc"
  printf '\t%s\t%s\n' "w, worker" "$worker_desc"
  printf '\t%s\t%s\n' "m, master" "$master_desc"
}

function deploy_usage() {
  printf '%s\n' "$deploy_desc"
  printf '\t%s\n' "This command spawns a set of worker nodes on the specified remote"
  printf '\t%s\n' "machines. Afterwards, it spawns a master on the local machine,"
  printf '\t%s\n' "which automatically connects to the provided workers."
  printf '%s\n' "Usage:"
  printf '\t%s\n' "skitter deploy [COMMAND OPTIONS] WORKERS"
  printf '\t%s\n' "skitter deploy [COMMAND OPTIONS] --worker-file PATH [WORKERS]"
  printf '%s\n'         "Command Options:"
  printf '\t%s\t%s\n'   "-c, --cookie COOKIE"    "Set the distribution cookie"
  printf '\t%s\t%s\n'   "-f, --worker-file PATH" "Read the list of workers to spawn from PATH"
  printf '\t\t\t\t%s\n'                          "PATH should contain a file where every line"
  printf '\t\t\t\t%s\n'                          "contains a single worker address."
  printf '\t%s\t%s\n'   "-d, --working-dir PATH" "Change to this directory on the workers"
  printf '\t\t\t\t%s\n'                          "before executing any command. Defaults to"
  printf '\t\t\t\t%s\n'                          "the current working directory."
  printf '\t%s\t\t%s\n' "-s, --stop"             "Stop every worker node. Do not start a master."
  printf '\t\t\t\t%s\n'                          "only needed if a deployment failed."
  printf '%s\n'       "Command Arguments:"
  printf '\t%s\t%s\n' "WORKERS" "List of worker nodes to spawn, will be spawned in order."
  printf '\t\t%s\n'             "A node is specified as [name@]hostname. If name is not"
  printf '\t\t%s\n'             "specified, it defaults to skitter_worker."
}

function local_usage() {
  printf '%s\n' "$local_desc"
  printf '\t%s\n' "This command spawns a local skitter application. A local application"
  printf '\t%s\n' "can not connect to other skitter applications. It is intended to be"
  printf '\t%s\n' "used to develop and test workflows locally before distributing them"
  printf '\t%s\n' "over a cluster."
  printf '%s\n' "Usage:"
  printf '\t%s\n' "skitter local"
}

function release_description() {
  printf '\t%s\n' "This command spawns a $1 application on the local node."
  printf '\t%s\n' "Generally, you should not call this mode yourself, as deploy"
  printf '\t%s\n' "mode will calls this script with the correct arguments."
  printf '\t%s\n' "This script is still documented for users who cannot use the"
  printf '\t%s\n' "the deploy script for some reason."
}

function release_usage() {
  printf '%s\n'       "Commands:"
  printf '\t%s\t%s\n' "s, start"      "Starts a $1"
  printf '\t%s\t%s\n' "S, start_iex"  "Starts a $1 with an iex shell"
  printf '\t%s\t%s\n' "d, daemon"     "Starts a $1 as a daemon"
  printf '\t%s\t%s\n' "D, daemon_iex" "Starts a $1 as a daemon with iex attached"
  printf '\t%s\t\t%s\n' "remote"      "Open an iex shell on the local $1 daemon"
  printf '\t%s\t\t%s\n' "restart" "Restart the $1 daemon"
  printf '\t%s\t\t%s\n' "stop"    "Stop the $1 daemon"
  printf '\t%s\t\t%s\n' "pid"     "Get the pid of the $1 daemon"

  printf '%s\n'         "Command Options:"
  printf '\t%s\t%s\n'   "-c, --cookie COOKIE" "Set the distribution cookie"
  printf '\t%s\t\t%s\n' "-n, --name NAME"     "Set the name of the node."
}

function worker_usage() {
  printf '%s\n' "$worker_desc"
  release_description "worker"

  printf '%s\n' "Usage:"
  printf '\t%s\n' "skitter worker COMMAND [COMMAND OPTIONS] [MASTER]"

  release_usage "worker"
  printf '\t%s\n'   "--shutdown-with-master, --no-shutdown-with-master"
  printf '\t\t%s\n' "Automatically shut down the worker when the connected"
  printf '\t\t%s\n' "master node shuts down. Can only be passed to start,"
  printf '\t\t%s\n' "start_iex, daemon and daemon_iex. Default to true."

  printf '%s\n'       "Command Arguments:"
  printf '\t%s\t%s\n' "MASTER" "Connect to the master node at this address. Optional."
  printf '\t\t%s\n'            "Can only be passed to start, start_iex, daemon and daemon_iex."
}

function master_usage() {
  printf '%s\n' "$master_desc"

  printf '%s\n' "Usage:"
  printf '\t%s\n' "skitter master COMMAND [WORKERS]"

  release_usage "master"
  printf '%s\n'       "Command Arguments:"
  printf '\t%s\t%s\n' "WORKERS" "Connect to the provided worker nodes, optional."
  printf '\t\t%s\n'             "Can only be passed to start, start_iex, daemon and daemon_iex."
}

# --------- #
# Utilities #
# --------- #

function echoerr() {
  echo "$@" 1>&2
}

function argerr() {
  echoerr "$2"
  $1_usage
  exit 1
}

# Colors
# ------

function color() {
  printf "$1$2${creset}"
}

creset='\033[0m'

red='\033[0;31m'
orange='\033[0;33m'
green='\033[0;32m'
purple='\033[0;34m'


# ---------- #
# Mode logic #
# ---------- #

# Help
# ----

function do_help() {
  if [ -z $1 ]
  then
    global_usage
  else
    case "$1" in
      d|deploy)
        deploy_usage
        ;;
      l|local)
        local_usage
        ;;
      w|worker)
        worker_usage
        ;;
      m|master)
        master_usage
        ;;
      *)
        argerr "global" "Cannot get help, '$1' is not a valid command"
    esac
  fi
}

# Release Logic
# -------------

function rel_cmd() {
  if [ ! -d "$SKITTER_REL_PATH" ]
  then
    echoerr "$SKITTER_REL_PATH does not exist"
    exit 2
  fi
  $maybe_dry_run $SKITTER_REL_PATH/bin/<%= @release.name %> $1
}

function maybe_add_name() {
  echo $2 | awk -v default_name=$1 '!/@/ {printf "%s@%s", default_name, $0} /@/ {print}'
}

function worker_start_parse() {
  while test $# -gt 0
    do
      case "$1" in
        --shutdown-with-master)
          $maybe_dry_run unset SKITTER_NO_SHUTDOWN_WITH_MASTER
          ;;
        --no-shutdown-with-master)
          $maybe_dry_run export SKITTER_NO_SHUTDOWN_WITH_MASTER=""
          ;;
        -c|--cookie)
          test $# -lt 2 && argerr "worker" "Missing value for optional argument '--cookie'."
          $maybe_dry_run export RELEASE_COOKIE="$2"
          shift
          ;;
        -n|--name)
          test $# -lt 2 && argerr "worker" "Missing value for optional argument '--name'."
          $maybe_dry_run export RELEASE_NODE="$2"
          shift
          ;;
        *)
          REMOTE=$(maybe_add_name "skitter_master" $1)
          $maybe_dry_run export SKITTER_MASTER=$REMOTE
          ;;
      esac
      shift
  done
}

function master_start_parse() {
  local workers

  while test $# -gt 0
    do
      case "$1" in
        -c|--cookie)
          test $# -lt 2 && argerr "master" "Missing value for optional argument '--cookie'."
          $maybe_dry_run export RELEASE_COOKIE="$2"
          shift
          ;;
        -n|--name)
          test $# -lt 2 && argerr "master" "Missing value for optional argument '--name'."
          $maybe_dry_run export RELEASE_NODE="$2"
          shift
          ;;
        *)
          local workers="$workers $(maybe_add_name "skitter_worker" $1)"
          ;;
      esac
      shift
  done

  if [ -n "$workers" ]
  then
    $maybe_dry_run export SKITTER_WORKERS="$workers"
  fi
}

function do_worker_master() {
  export SKITTER_MODE="$1"
  mode="$1"
  shift

  if [ $# -eq 0 ]
  then
    argerr "$mode" "Missing command"
  fi

  case $1 in
    s|start)
      shift
      "$mode"_start_parse $@
      rel_cmd "start"
      ;;
    S|start_iex)
      shift
      "$mode"_start_parse $@
      rel_cmd "start_iex"
      ;;
    d|daemon)
      shift
      "$mode"_start_parse $@
      rel_cmd "daemon"
      ;;
    D|daemon_iex)
      shift
      "$mode"_start_parse $@
      rel_cmd "daemon_iex"
      ;;
    remote|restart|stop|pid)
      rel_cmd $1
      ;;
    *)
      argerr "$mode" "Invalid command: '$1'"
  esac
}

function do_local() {
  mode="local"
  pushd $SKITTER_REL_PATH/skitter_$mode > /dev/null
  rel_cmd "start_iex"
  popd > /dev/null
}


# Deploy Logic
# ------------

function for_workers() {
  local cmd="cd ${2} && $script worker ${4} ${3}"
  connected=""

  for remote in $1
  do
    if [ -z $maybe_dry_run ]
    then
      printf "${5} $remote "
      if ssh -q "$remote" "$cmd"
      then
        printf "$(color $green ✓)\n"
        connected="$connected $remote"
      else
        printf "$(color $red ✗)\n"
        failed="$remote"
        return 1
      fi
      else
        $maybe_dry_run ssh "$remote" "$cmd"
    fi
  done
}

function stop_deploy() {
  for_workers "$1" "$2" "$3" "stop" "$(color $orange "* stopping")"
}

function start_deploy() {
  printf "⬡⬢⬡⬢ Skitter deploy <%= @release.version %>\n"
  if [ -n "$3" ] ; then printf "> cookie: $(color $purple ${3##--cookie })\n" ; fi
  printf "> workers: $(color $purple "$1")\n\n"

  if for_workers "$1" "$2" "$3" "daemon" "$(color $green "* starting")"
  then
    printf "\nWorkers initialized, starting master.\n"
    $maybe_dry_run sleep 1
    do_worker_master master start_iex "$3" "$1"
  else
    printf "\nFailed to initialize some workers:\n"
    printf "> Succeeded: $(color $green "$connected")\n"
    printf "> Failed: $(color $red "$failed")\n"

    printf "\nShutting down initialized workers:\n"
    stop_deploy "$connected" "$2" "$3"
  fi
}


function do_deploy() {
  local mode="start"
  local remote_dir=`pwd`
  local workers
  local cookie

  while test $# -gt 0
    do
      case "$1" in
        -s|--stop)
          local mode="stop"
          ;;
        -d|--working-dir)
          test $# -lt 2 && argerr "deploy" "Missing value for optional argument '--working-dir'."
          remote_dir="$2"
          shift
          ;;
        -c|--cookie)
          test $# -lt 2 && argerr "deploy" "Missing value for optional argument '--cookie'."
          cookie="--cookie $2"
          shift
          ;;
        -f|--worker-file)
          test $# -lt 2 && argerr "worker" "Missing value for optional argument '--worker-file'."
          while IFS= read -r line
          do
            local workers="$workers $line"
          done < "$2"
          shift
          ;;
        *)
          local workers="$workers $1"
          ;;
      esac
      shift
    done

    if [ -z "$workers" ] ; then argerr "deploy" "Missing workers" ; fi
    "$mode"_deploy "$workers" "$remote_dir" "$cookie"
}

# ------------ #
# Script logic #
# ------------ #

# Store the script invocation so we can use it when deploying
script=$0

# No arguments: print usage and quit
if [ $# -eq 0 ]
then
  global_usage
  exit 0
fi

# We expect the release files to be stored alongside this script.
# Store the location of the release as SKITTER_REL_PATH
SELF=$(readlink "$0" || true)
if [ -z "$SELF" ]; then SELF="$0"; fi
PARENT_DIR="$(cd "$(dirname "$SELF")" && pwd -P)"
SKITTER_REL_PATH=$PARENT_DIR/<%= @release.name %>

## Parse global options and mode
while test $# -gt 0
  do
    case "$1" in
      -v|--version)
        echo "skitter <%= @release.version %>"
        exit 0
        ;;
      --debug)
        maybe_dry_run="echo"
        ;;
      *)
        break
        ;;
    esac
    shift
done

if [ $# -eq 0 ]
then
  argerr "global" "Missing command"
  exit 0
fi

# Parse the mode
case "$1" in
  h|help)
    shift
    do_help $@
    ;;
  w|worker)
    shift
    do_worker_master "worker" $@
    ;;
  m|master)
    shift
    do_worker_master "master" $@
    ;;
  d|deploy)
    shift
    do_deploy $@
    ;;
  l|local)
    shift
    do_local $@
    ;;
  *)
    argerr "'$1' is not a valid command"
    ;;
esac
