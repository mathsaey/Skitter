# Copyright 2018, 2019 Mathijs Saey, Vrije Universiteit Brussel

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

defmodule Skitter.DSLUtils do
  @moduledoc false
  # Shared utilities for Skitter's DSL's

  @doc """
  Turns an elixir style name into a string with spaces.
  """
  def module_name_to_snake_case(name) do
    name = name |> Atom.to_string() |> String.split(".") |> Enum.at(-1)
    rgxp = ~r/([[:upper:]]+(?=[[:upper:]]|$)|[[:upper:]][[:lower:]]*|\d+)/
    rgxp |> Regex.replace(name, " \\0") |> String.trim()
  end

  @doc """
  Turns any valid port specification into a list of port names.

  Allowed values are:

  - A list of elixir names
  - A single elixir name
  """
  def parse_port_names(lst) when is_list(lst) do
    Enum.map(lst, &port_to_symbol/1)
  end

  def parse_port_names(el), do: parse_port_names([el])

  @doc """
  Transform a port name (which is just a standard elixir name) into  a symbol

  If the name is ill-formed, return an {:error, form} pair.
  """
  def port_to_symbol({name, _env, nil}), do: name
  def port_to_symbol(any), do: throw({:error, :component, :invalid_port, any})

  @doc """
  Retrieve the description from a component if it is present.

  A description is provided when the component body start with a string.
  Remove the string from the component body and return it as the description.
  """
  def extract_description({:__block__, env, [str | r]}) when is_binary(str) do
    {{:__block__, env, r}, str}
  end

  def extract_description(str) when is_binary(str) do
    {quote do
     end, str}
  end

  def extract_description(any), do: {any, ""}

  @doc """
  Generate a moduledoc based on a description string.
  """
  def generate_moduledoc(""), do: false

  def generate_moduledoc(desc) do
    """
      #{desc}

      _This moduledoc was automatically generated by `Skitter`_.
    """
  end
end
